// File: src/index.js

import './styles.css';
import { marked } from 'marked';

class EasyChatWidget {
    constructor(config = {}) {
        // Default configuration
        this.config = {
            botName: config.botName || 'Chat Assistant',
            botImage: config.botImage || 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"%3E%3Cpath fill="%23fff" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"%3E%3C/path%3E%3C/svg%3E',
            greeting: config.greeting || 'Hello! How can I help you today?',
            placeholder: config.placeholder || 'Type your message here...',
            primaryColor: config.primaryColor || '#0084ff',
            secondaryColor: config.secondaryColor || '#f0f2f5',
            apiEndpoint: config.apiEndpoint || 'http://localhost:8000/chat',
            suggestions: config.suggestions || [
                'How can you help me?',
                'What services do you offer?',
                'Tell me more'
            ],
            position: config.position || 'right', // 'right' or 'left'
            theme: config.theme || 'light', // 'light' or 'dark'
            fontSize: config.fontSize || '14px',
            width: config.width || '400px',
            height: config.height || '600px',
            showTimestamp: config.showTimestamp || false,
            enableSound: config.enableSound || false,
            enableTypingIndicator: config.enableTypingIndicator !== false,
            typingDelay: config.typingDelay || 50
        };

        this.currentUser = this.generateUserId();
        this.chatHistory = [];
        this.init();
    }

    generateUserId() {
        return 'user_' + Date.now() + Math.random().toString(36).substr(2, 5);
    }

    init() {
        this.injectStyles();
        this.createWidget();
        this.setupEventListeners();
        this.loadChatHistory();
    }

    injectStyles() {
        const style = document.createElement('style');
        style.textContent = `
            :root {
                --chat-primary-color: ${this.config.primaryColor};
                --chat-secondary-color: ${this.config.secondaryColor};
                --chat-font-size: ${this.config.fontSize};
                --chat-width: ${this.config.width};
                --chat-height: ${this.config.height};
            }
        `;
        document.head.appendChild(style);
    }

    createWidget() {
        const widget = document.createElement('div');
        widget.className = `chat-widget ${this.config.theme} ${this.config.position}`;
        widget.innerHTML = `
            <div class="chat-toggle">
                <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H6l-2 2V4h16v12z'/%3E%3C/svg%3E" alt="Chat">
            </div>
            <div class="chat-window">
                <div class="chat-header">
                    <div class="chat-header-title">
                        <div class="chat-header-avatar">
                            <img src="${this.config.botImage}" alt="${this.config.botName}">
                        </div>
                        <h2>${this.config.botName}</h2>
                    </div>
                    <div class="chat-header-actions">
                        <button class="erase-chat">
                            <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z'/%3E%3C/svg%3E" alt="Erase">
                        </button>
                        <button class="close-chat">
                            <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'/%3E%3C/svg%3E" alt="Close">
                        </button>
                    </div>
                </div>
                <div class="chat-messages">
                    <div class="message-row" id="greeting-row">
                        <div class="message bot-message greeting-message">
                            ${this.config.greeting}
                        </div>
                    </div>
                    <div class="typing-indicator">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
                <div class="chat-input-container">
                    <div class="suggestion-chips">
                        ${this.config.suggestions.map(suggestion => 
                            `<div class="chip">${suggestion}</div>`
                        ).join('')}
                    </div>
                    <div class="chat-input">
                        <input type="text" placeholder="${this.config.placeholder}">
                        <button class="send-button">
                            <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M2.01 21L23 12 2.01 3 2 10l15 2-15 2z'/%3E%3C/svg%3E" alt="Send">
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(widget);
        this.widget = widget;
    }

    setupEventListeners() {
        const chatToggle = this.widget.querySelector('.chat-toggle');
        const chatWindow = this.widget.querySelector('.chat-window');
        const closeChat = this.widget.querySelector('.close-chat');
        const eraseChat = this.widget.querySelector('.erase-chat');
        const input = this.widget.querySelector('.chat-input input');
        const sendButton = this.widget.querySelector('.send-button');
        const chips = this.widget.querySelectorAll('.chip');

        chatToggle.addEventListener('click', () => {
            chatWindow.classList.add('active');
        });

        closeChat.addEventListener('click', () => {
            chatWindow.classList.remove('active');
        });

        eraseChat.addEventListener('click', () => {
            if (confirm('Clear chat history?')) {
                this.clearHistory();
            }
        });

        sendButton.addEventListener('click', () => {
            const message = input.value.trim();
            if (message) {
                this.sendMessage(message);
                input.value = '';
            }
        });

        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const message = input.value.trim();
                if (message) {
                    this.sendMessage(message);
                    input.value = '';
                }
            }
        });

        chips.forEach(chip => {
            chip.addEventListener('click', () => {
                this.sendMessage(chip.textContent);
            });
        });
    }

    async sendMessage(message) {
        this.addMessage(message, 'user');

        const typingIndicator = this.widget.querySelector('.typing-indicator');
        typingIndicator.style.display = 'block';

        try {
            const response = await fetch(this.config.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    query: message,
                    userId: this.currentUser
                })
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();
            typingIndicator.style.display = 'none';
            this.addMessage(data.response, 'bot', true);
            
        } catch (error) {
            console.error('Error:', error);
            typingIndicator.style.display = 'none';
            this.addMessage('Sorry, there was an error processing your request.', 'bot');
        }
    }

    addMessage(text, sender, useTypewriter = true) {
        const messagesDiv = this.widget.querySelector('.chat-messages');
        const messageRow = document.createElement('div');
        messageRow.className = 'message-row';
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;

        if (sender === 'bot' && useTypewriter) {
            this.typeWriter(messageDiv, marked.parse(text));
        } else {
            messageDiv.innerHTML = sender === 'bot' ? marked.parse(text) : text;
        }

        if (this.config.showTimestamp) {
            const timestamp = document.createElement('div');
            timestamp.className = 'message-timestamp';
            timestamp.textContent = new Date().toLocaleTimeString();
            messageDiv.appendChild(timestamp);
        }

        messageRow.appendChild(messageDiv);
        messagesDiv.insertBefore(messageRow, messagesDiv.querySelector('.typing-indicator'));
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    typeWriter(element, text, callback) {
        element.innerHTML = '';
        let i = 0;
        
        const type = () => {
            if (i < text.length) {
                element.innerHTML += text.charAt(i);
                i++;
                setTimeout(type, this.config.typingDelay);
            } else if (callback) {
                callback();
            }
        };

        type();
    }

    clearHistory() {
        const messages = this.widget.querySelectorAll('.message-row');
        const greetingRow = this.widget.getElementById('greeting-row');
        
        messages.forEach(message => {
            if (message !== greetingRow) {
                message.remove();
            }
        });
    }

    loadChatHistory() {
        // Implement chat history loading if needed
    }
}

// Export the class
export default EasyChatWidget;